@page "/debt"
@inject ExpenseTracker.Services.DebtService DebtService

<div class="dashboard-header">
    <div class="buttons-container">
        <button class="btn btn-primary" @onclick="ShowAddDebtModal">Add Debt</button>
        <button class="btn btn-info" @onclick="ExportDebts">Export</button>
    </div>
</div>

<div class="filter-container">
    <input type="text" class="form-control" @bind="filterDescription" @bind:after="ApplyFilter" placeholder="Search by Description" />
    <select class="form-control" @bind="filterCategory" @bind:after="ApplyFilter">
        <option value="">Select Category</option>
        @foreach (var category in categories)
        {
            <option value="@category">@category</option>
        }
    </select>
    <select class="form-control" @bind="filterType" @bind:after="ApplyFilter">
        <option value="">Select Type</option>
        <option value="Personal">Personal</option>
        <option value="Business">Business</option>
        <option value="Student Loan">Student Loan</option>
        <option value="Home Loan">Home Loan</option>
    </select>
    <select class="form-control" @bind="filterIsPaid" @bind:after="ApplyFilter">
        <option value="">Select Payment Status</option>
        <option value="true">Paid</option>
        <option value="false">Pending</option>
    </select>
    <div class="date-range">
        <label>Start Date:</label>
        <input type="date" class="form-control" @bind="startDate" @bind:after="ApplyFilter" />
        <label>End Date:</label>
        <input type="date" class="form-control" @bind="endDate" @bind:after="ApplyFilter" />
    </div>
    <div class="filter-buttons">
        <button class="btn btn-primary" @onclick="ApplyFilter">Filter</button>
        <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-info" @onclick="ToggleSort">Sort by Amount @(isSortedAscending ? "Ascending" : "Descending")</button>
    </div>
</div>

<table class="transaction-table">
    <thead>
        <tr>
            <th>Description</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Category</th>
            <th>Due Date</th>
            <th>Is Paid</th>
            <th>When Added</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in filteredDebts)
        {
            <tr>
                <td>@debt.DebtDescription</td>
                <td>@debt.DebtType</td>
                <td>@debt.DebtAmount.ToString("C")</td>
                <td>@debt.DebtCategory</td>
                <td>@debt.DueDate.ToShortDateString()</td>
                <td>@(debt.IsPaid ? "Yes" : "No")</td>
                <td>@debt.WhenAdded.ToShortDateString()</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => ShowEditDebtModal(debt)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteDebtAsync(debt.DebtId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (isModalVisible)
{
    <div class="modal">
        <div class="modal-content">
            <h2>@(isEditMode ? "Edit Debt" : "Add New Debt")</h2>
            <EditForm Model="currentDebt" OnValidSubmit="SaveDebtAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label>Description:</label>
                    <InputText class="form-control" @bind-Value="currentDebt.DebtDescription" />
                </div>

                <div>
                    <label>Type:</label>
                    <InputSelect class="form-control" @bind-Value="currentDebt.DebtType">
                        <option value="">Select Type</option>
                        <option value="Personal">Personal</option>
                        <option value="Business">Business</option>
                        <option value="Student Loan">Student Loan</option>
                        <option value="Home Loan">Home Loan</option>
                    </InputSelect>
                </div>

                <div>
                    <label>Amount:</label>
                    <InputNumber class="form-control" @bind-Value="currentDebt.DebtAmount" />
                </div>

                <div>
                    <label>Category:</label>
                    <InputSelect class="form-control" @bind-Value="currentDebt.DebtCategory">
                        <option value="">Select Category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                </div>

                <div>
                    <label>Due Date:</label>
                    <InputDate class="form-control" @bind-Value="currentDebt.DueDate" />
                </div>

                <div>
                    <label>Is Paid:</label>
                    <InputCheckbox @bind-Value="currentDebt.IsPaid" />
                </div>

                <div>
                    <label>When Added:</label>
                    <InputDate class="form-control" @bind-Value="currentDebt.WhenAdded" />
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" type="submit">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<ExpenseTracker.Models.Debt> debts = new();
    private List<ExpenseTracker.Models.Debt> filteredDebts = new();
    private ExpenseTracker.Models.Debt currentDebt = new();
    private bool isModalVisible = false;
    private bool isEditMode = false;
    private string filterDescription = "";
    private string filterCategory = "";
    private string filterType = "";
    private bool? filterIsPaid = null;
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private List<string> categories = new List<string> { "Personal", "Business", "Student Loan", "Home Loan" };
    private bool isSortedAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDebtsAsync();
        ApplyFilter();
    }

    private async Task LoadDebtsAsync()
    {
        debts = await DebtService.GetDebtsAsync();
    }

    private void ApplyFilter()
    {
        var query = debts.AsQueryable();

        if (!string.IsNullOrWhiteSpace(filterDescription))
        {
            query = query.Where(d => d.DebtDescription != null &&
                d.DebtDescription.Contains(filterDescription, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(filterCategory))
        {
            query = query.Where(d => d.DebtCategory != null &&
                d.DebtCategory.Equals(filterCategory, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(filterType))
        {
            query = query.Where(d => d.DebtType != null &&
                d.DebtType.Equals(filterType, StringComparison.OrdinalIgnoreCase));
        }

        if (filterIsPaid.HasValue)
        {
            query = query.Where(d => d.IsPaid == filterIsPaid.Value);
        }

        if (startDate.HasValue)
        {
            query = query.Where(d => d.DueDate >= startDate.Value);
        }

        if (endDate.HasValue)
        {
            query = query.Where(d => d.DueDate <= endDate.Value);
        }

        filteredDebts = isSortedAscending
            ? query.OrderBy(d => d.DebtAmount).ToList()
            : query.OrderByDescending(d => d.DebtAmount).ToList();

        StateHasChanged();
    }

    private void ClearFilters()
    {
        filterDescription = "";
        filterCategory = "";
        filterType = "";
        filterIsPaid = null;
        startDate = null;
        endDate = null;
        isSortedAscending = true;

        ApplyFilter();
    }

    private void ShowAddDebtModal()
    {
        currentDebt = new ExpenseTracker.Models.Debt
            {
                WhenAdded = DateTime.Now,
                DueDate = DateTime.Now.AddMonths(1)
            };
        isEditMode = false;
        isModalVisible = true;
    }

    private void ShowEditDebtModal(ExpenseTracker.Models.Debt debt)
    {
        currentDebt = new ExpenseTracker.Models.Debt
            {
                DebtId = debt.DebtId,
                DebtDescription = debt.DebtDescription,
                DebtType = debt.DebtType,
                DebtAmount = debt.DebtAmount,
                DebtCategory = debt.DebtCategory,
                DueDate = debt.DueDate,
                IsPaid = debt.IsPaid,
                WhenAdded = debt.WhenAdded
            };
        isEditMode = true;
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        currentDebt = new ExpenseTracker.Models.Debt();
    }

    private void ToggleSort()
    {
        isSortedAscending = !isSortedAscending;
        ApplyFilter();
    }

    private async Task SaveDebtAsync()
    {
        try
        {
            if (isEditMode)
            {
                await DebtService.UpdateDebtAsync(currentDebt);
            }
            else
            {
                await DebtService.AddDebtAsync(currentDebt);
            }

            await LoadDebtsAsync();
            ApplyFilter();
            CloseModal();
        }
        catch (Exception)
        {
            // Handle error appropriately
        }
    }

    private async Task DeleteDebtAsync(Guid debtId)
    {
        try
        {
            await DebtService.DeleteDebtAsync(debtId);
            await LoadDebtsAsync();
            ApplyFilter();
        }
        catch (Exception)
        {
            // Handle error appropriately
        }
    }

    private void ExportDebts()
    {
        var debtsToExport = filteredDebts.Select(d => new
        {
            Description = d.DebtDescription,
            Type = d.DebtType,
            Amount = d.DebtAmount.ToString("C"),
            Category = d.DebtCategory,
            DueDate = d.DueDate.ToString("yyyy-MM-dd"),
            IsPaid = d.IsPaid ? "Yes" : "No",
            WhenAdded = d.WhenAdded.ToString("yyyy-MM-dd")
        }).ToList();

        // Implement export logic here
    }
}