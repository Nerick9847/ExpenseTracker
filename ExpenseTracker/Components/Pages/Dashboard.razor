@page "/dashboard"
@using ExpenseTracker.Components.Layout
@using ExpenseTracker.Services
@inject TransactionService transactionService
@inject DebtService debtService
@using MudBlazor

<h3>Dashboard</h3>

<div class="dashboard">
    <!-- Date Range Filter -->
    <div class="date-filter">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" @bind="StartDate" />

        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" @bind="EndDate" />

        <button @onclick="ApplyFilter">Apply Filter</button>
        <button @onclick="ClearFilter">Clear Filter</button>
    </div>

    <!-- Summary Cards -->
    <div class="card balance-card">
        <h4>Balance</h4>
        <p>@Balance.ToString("C")</p>
    </div>
    <div class="summary-cards">
        <div class="card inflow-card">
            <h4>Total Inflows</h4>
            <p>@TotalIncome.ToString("C")</p>
        </div>
        <div class="card outflow-card">
            <h4>Total Outflows</h4>
            <p>@TotalExpense.ToString("C")</p>
        </div>
        <div class="card debt-card">
            <h4>Debt</h4>
            <p>@TotalDebt.ToString("C")</p>
        </div>
    </div>

    <!-- Transactions Chart -->
    <div class="card transactions-chart-card">
        <h4>Transactions Chart</h4>
        <MudChart ChartType="ChartType.Pie"
                  InputData="@transactionCounts"
                  InputLabels="@transactionLabels"
                  Width="300px"
                  Height="300px" />
    </div>

    <!-- Tables -->
    <div class="tables-container">
        <div class="table inflow-table">
            <h4>Inflow Transactions</h4>
            <table>
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Category</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in InflowTransactions)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td>@transaction.Category</td>
                            <td>@transaction.Notes</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="table outflow-table">
            <h4>Outflow Transactions</h4>
            <table>
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Category</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in OutflowTransactions)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td>@transaction.Category</td>
                            <td>@transaction.Notes</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pending Debts Table -->
    <div class="table debt-table">
        <h4>Pending Debts</h4>
        <table>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Due Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in PendingDebts)
                {
                    <tr>
                        <td>@debt.DebtDescription</td>
                        <td>@debt.DebtAmount.ToString("C")</td>
                        <td>@debt.DebtCategory</td>
                        <td>@debt.DueDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private decimal TotalIncome;
    private decimal TotalExpense;
    private decimal TotalDebt;
    private decimal Balance;

    private List<FinancialTransaction> AllTransactions = new();
    private List<FinancialTransaction> InflowTransactions = new();
    private List<FinancialTransaction> OutflowTransactions = new();
    private List<ExpenseTracker.Models.Debt> AllDebts = new();
    private List<ExpenseTracker.Models.Debt> PendingDebts = new();

    private DateTime StartDate = DateTime.Now.AddMonths(-1);
    private DateTime EndDate = DateTime.Now;

    private double[] transactionCounts = new double[3]; // [Income, Expense, Debt]
    private string[] transactionLabels = { "Inflow", "Outflow", "Debt" };

    protected override async Task OnInitializedAsync()
    {
        // Load all transactions and debts
        AllTransactions = await transactionService.GetTransactionsAsync();
        AllDebts = await debtService.GetDebtsAsync();

        // Display all data by default
        DisplayAllData();
    }

    private void ApplyFilter()
    {
        InflowTransactions = AllTransactions
            .Where(t => t.Type == "Income" && t.Date >= StartDate && t.Date <= EndDate)
            .ToList();

        OutflowTransactions = AllTransactions
            .Where(t => t.Type == "Expense" && t.Date >= StartDate && t.Date <= EndDate)
            .ToList();

        PendingDebts = AllDebts
            .Where(d => !d.IsPaid && d.DueDate >= StartDate && d.DueDate <= EndDate)
            .ToList();

        UpdateTotalsAndChart();
    }

    private void ClearFilter()
    {
        StartDate = DateTime.Now.AddMonths(-1);
        EndDate = DateTime.Now;
        DisplayAllData();
    }

    private void DisplayAllData()
    {
        InflowTransactions = AllTransactions.Where(t => t.Type == "Income").ToList();
        OutflowTransactions = AllTransactions.Where(t => t.Type == "Expense").ToList();
        PendingDebts = AllDebts.Where(d => !d.IsPaid).ToList();

        UpdateTotalsAndChart();
    }

    private void UpdateTotalsAndChart()
    {
        TotalIncome = InflowTransactions.Sum(t => t.Amount);
        TotalExpense = OutflowTransactions.Sum(t => t.Amount);
        TotalDebt = PendingDebts.Sum(d => d.DebtAmount);
        Balance = TotalIncome + TotalDebt - TotalExpense;

        // Update pie chart data
        transactionCounts[0] = InflowTransactions.Count;
        transactionCounts[1] = OutflowTransactions.Count;
        transactionCounts[2] = PendingDebts.Count;
    }
}
