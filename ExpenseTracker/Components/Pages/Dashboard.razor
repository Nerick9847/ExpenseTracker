@page "/dashboard"
@using ExpenseTracker.Components.Layout
@using ExpenseTracker.Services
@inject TransactionService transactionService
@inject DebtService debtService

<h3>Dashboard</h3>

<div class="dashboard">
    <!-- Summary Cards -->
    <div class="card balance-card">
        <h4>Balance</h4>
        <p>@Balance.ToString("C")</p>
    </div>
    <div class="summary-cards">
        <div class="card inflow-card">
            <h4>Total Inflows</h4>
            <p>@TotalIncome.ToString("C")</p>
        </div>
        <div class="card outflow-card">
            <h4>Total Outflows</h4>
            <p>@TotalExpense.ToString("C")</p>
        </div>
        <div class="card debt-card">
            <h4>Debt</h4>
            <p>@TotalDebt.ToString("C")</p>
        </div>
    </div>

    <!-- Tables -->
    <div class="tables-container">
        <div class="table inflow-table">
            <h4>Inflow Transactions</h4>
            <table>
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Category</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in InflowTransactions)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td>@transaction.Category</td>
                            <td>@transaction.Notes</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="table outflow-table">
            <h4>Outflow Transactions</h4>
            <table>
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Category</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in OutflowTransactions)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td>@transaction.Category</td>
                            <td>@transaction.Notes</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <!-- Pending Debts Table -->
    <div class="table debt-table">
        <h4>Pending Debts</h4>
        <table>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Due Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in PendingDebts)
                {
                    <tr>
                        <td>@debt.DebtDescription</td>
                        <td>@debt.DebtAmount.ToString("C")</td>
                        <td>@debt.DebtCategory</td>
                        <td>@debt.DueDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

@code {
    private decimal TotalIncome;
    private decimal TotalExpense;
    private decimal TotalDebt;
    private decimal Balance;

    private List<FinancialTransaction> InflowTransactions = new();
    private List<FinancialTransaction> OutflowTransactions = new();
    private List<ExpenseTracker.Models.Debt> PendingDebts = new();


    protected override async Task OnInitializedAsync()
    {
        // Load transactions
        var transactions = await transactionService.GetTransactionsAsync();

        // Filter inflow and outflow transactions
        InflowTransactions = transactions.Where(t => t.Type == "Income").ToList();
        OutflowTransactions = transactions.Where(t => t.Type == "Expense").ToList();

        // Fetch and filter debts
        var allDebts = await debtService.GetDebtsAsync();
        PendingDebts = allDebts.Where(d => !d.IsPaid).ToList();

        // Calculate totals
        TotalIncome = await transactionService.GetTotalIncomeAsync();
        TotalExpense = await transactionService.GetTotalExpenseAsync();
        TotalDebt = await debtService.GetTotalUnpaidDebtAsync();
        Balance = TotalIncome + TotalDebt - TotalExpense;
    }
}
