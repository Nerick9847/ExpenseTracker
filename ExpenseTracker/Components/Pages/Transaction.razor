@page "/transaction"

<style>
    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .transaction-list {
        margin-top: 20px;
    }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
</style>

<div class="d-flex justify-content-between mb-3">
    <div>
        <button class="btn btn-primary" @onclick="OpenAddModal">Add Transaction</button>
        <button class="btn btn-secondary" @onclick="OpenCategoryModal">Add Category</button>
    </div>

    <!-- Search and Filter Section -->
    <div class="d-flex align-items-center">
        <input type="text" class="form-control me-2" placeholder="Search by Description" @bind="searchQuery" />
        <select class="form-control me-2" @bind="selectedCategory">
            <option value="">All Categories</option>
            @foreach (var category in categories)
            {
                <option value="@category">@category</option>
            }
        </select>
        <input type="date" class="form-control me-2" @bind="filterDate" />
        <button class="btn btn-outline-primary" @onclick="SearchTransactions">Search</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Description</th>
            <th>Date</th>
            <th>Amount</th>
            <th>Type</th>
            <th>Category</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Description</td>
                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                <td>@transaction.Amount.ToString("C")</td>
                <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</td>
                <td>@transaction.Category</td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-warning btn-sm" @onclick="() => OpenEditModal(transaction)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Description</label>
                        <input type="text" class="form-control" @bind="transactionModel.Description" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="transactionModel.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="transactionModel.Amount" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="transactionModel.Type">
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Category</label>
                        <select class="form-control" @bind="transactionModel.Category">
                            <option value="">Select Category</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTransaction">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showCategoryModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Category</h5>
                    <button type="button" class="btn-close" @onclick="CloseCategoryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Category Name</label>
                        <input type="text" class="form-control" @bind="newCategory" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCategoryModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddCategory">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    public class FinancialTransaction
    {
        public string Description { get; set; }
        public DateTime Date { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string Category { get; set; }
    }

    private List<FinancialTransaction> transactions = new List<FinancialTransaction>
    {
        new FinancialTransaction { Description = "Grocery Shopping", Date = DateTime.Parse("2024-12-25"), Amount = 150, Type = "Expense", Category = "Food" },
        new FinancialTransaction { Description = "Freelance Payment", Date = DateTime.Parse("2024-12-24"), Amount = 500, Type = "Income", Category = "Work" },
        new FinancialTransaction { Description = "Borrowed from Someone", Date = DateTime.Parse("2024-12-22"), Amount = 300, Type = "Debt", Category = "Loan" }
    };

    private List<FinancialTransaction> filteredTransactions = new List<FinancialTransaction>();
    private List<string> categories = new List<string> { "Food", "Work", "Loan" };
    private FinancialTransaction transactionModel = new FinancialTransaction();
    private bool showModal = false;
    private bool showCategoryModal = false;
    private string modalTitle = "Add Transaction";
    private string searchQuery = string.Empty;
    private string selectedCategory = string.Empty;
    private DateTime? filterDate = null;
    private string newCategory = string.Empty;

    protected override void OnInitialized()
    {
        filteredTransactions = transactions;
    }

    private void OpenAddModal()
    {
        transactionModel = new FinancialTransaction { Date = DateTime.Now };
        modalTitle = "Add Transaction";
        showModal = true;
    }

    private void OpenEditModal(FinancialTransaction transaction)
    {
        transactionModel = new FinancialTransaction
            {
                Description = transaction.Description,
                Date = transaction.Date,
                Amount = transaction.Amount,
                Type = transaction.Type,
                Category = transaction.Category
            };
        modalTitle = "Edit Transaction";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void SaveTransaction()
    {
        if (modalTitle == "Add Transaction")
        {
            transactions.Add(transactionModel);
        }
        else
        {
            var existingTransaction = transactions.FirstOrDefault(t => t.Description == transactionModel.Description);
            if (existingTransaction != null)
            {
                existingTransaction.Date = transactionModel.Date;
                existingTransaction.Amount = transactionModel.Amount;
                existingTransaction.Type = transactionModel.Type;
                existingTransaction.Category = transactionModel.Category;
            }
        }

        filteredTransactions = transactions;
        CloseModal();
    }

    private void DeleteTransaction(FinancialTransaction transaction)
    {
        transactions.Remove(transaction);
        filteredTransactions = transactions;
    }

    private void SearchTransactions()
    {
        filteredTransactions = transactions.Where(t =>
            (string.IsNullOrWhiteSpace(searchQuery) || t.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(selectedCategory) || t.Category == selectedCategory) &&
            (!filterDate.HasValue || t.Date.Date == filterDate.Value.Date)).ToList();
    }

    private void OpenCategoryModal()
    {
        newCategory = string.Empty;
        showCategoryModal = true;
    }

    private void CloseCategoryModal()
    {
        showCategoryModal = false;
    }

    private void AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory) && !categories.Contains(newCategory))
        {
            categories.Add(newCategory);
        }
        CloseCategoryModal();
    }
}
