@page "/transaction"

<style>
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .buttons-container {
        display: flex;
        gap: 10px;
    }

    .filter-container {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .form-control {
        width: 150px;
        margin-bottom: 10px;
    }

    .btn-primary {
        border-radius: 8px;
    }

    .btn-secondary {
        border-radius: 8px;
    }

    .transaction-table th {
        background-color: #f8f9fa;
    }

    .transaction-table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .btn-warning {
        background-color: #96d6b2;
    }

    .btn-danger {
        background-color: #800112;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 500px;
        width: 100%;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
    }
</style>

<div class="dashboard-header">
    <!-- Buttons for Add Transaction and Add Category -->
    <div class="buttons-container">
        <button class="btn btn-primary" @onclick="OpenAddModal">Add Transaction</button>
        <button class="btn btn-secondary" @onclick="OpenCategoryModal">Add Category</button>
    </div>

    <!-- Filter Controls -->
    <div class="filter-container">
        <select class="form-control" @bind="selectedType">
            <option value="">Select Type</option>
            <option value="Income">Income</option>
            <option value="Expense">Expense</option>
            <option value="Debt">Debt</option>
        </select>
        <select class="form-control" @bind="selectedCategory">
            <option value="">Select Category</option>
            @foreach (var category in database.Categories)
            {
                <option value="@category">@category</option>
            }
        </select>
        <input type="date" class="form-control" @bind="startDate" />
        <input type="date" class="form-control" @bind="endDate" />
        <button class="btn btn-primary" @onclick="FilterTransactions">Filter</button>
        <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button> <!-- Clear Filters Button -->
    </div>
</div>

<!-- Transaction Table -->
<table class="table transaction-table">
    <thead>
        <tr>
            <th>Description</th>
            <th>Notes</th>
            <th>Date</th>
            <th>Amount</th>
            <th>Type</th>
            <th>Category</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Description</td>
                <td>@transaction.Notes</td>
                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                <td>@transaction.Amount.ToString("C")</td>
                <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</td>
                <td>@(string.IsNullOrEmpty(transaction.Category) ? "Uncategorized" : transaction.Category)</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => OpenEditModal(transaction)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Transaction Modal -->
@if (showTransactionModal)
{
    <div class="modal">
        <div class="modal-content">
            <h2>@modalTitle</h2>
            <div>
                <label>Description:</label>
                <input type="text" class="form-control" @bind="transactionModel.Description" />
            </div>
            <div>
                <label>Notes:</label>
                <input type="text" class="form-control" @bind="transactionModel.Notes" />
            </div>
            <div>
                <label>Date:</label>
                <input type="date" class="form-control" @bind="transactionModel.Date" />
            </div>
            <div>
                <label>Amount:</label>
                <input type="number" class="form-control" @bind="transactionModel.Amount" />
            </div>
            <div>
                <label>Type:</label>
                <select class="form-control" @bind="transactionModel.Type">
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                    <option value="Debt">Debt</option>
                </select>
            </div>
            <div>
                <label>Category:</label>
                <select class="form-control" @bind="transactionModel.Category">
                    <option value="">Select Category</option>
                    @foreach (var category in database.Categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseTransactionModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveTransaction">Save</button>
            </div>
        </div>
    </div>
}

<!-- Category Modal -->
@if (showCategoryModal)
{
    <div class="modal">
        <div class="modal-content">
            <h2>Add Category</h2>
            <div>
                <label>Category Name:</label>
                <input type="text" class="form-control" @bind="newCategory" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseCategoryModal">Cancel</button>
                <button class="btn btn-primary" @onclick="AddCategory">Add</button>
            </div>
        </div>
    </div>
}

@code {
    private DatabaseModel database = new();
    private FinancialTransaction transactionModel = new();
    private string newCategory = string.Empty;
    private bool showTransactionModal = false;
    private bool showCategoryModal = false;
    private string modalTitle = "Add Transaction";
    private string selectedType = string.Empty;
    private string selectedCategory = string.Empty;
    private DateTime startDate = DateTime.MinValue;
    private DateTime endDate = DateTime.MaxValue;
    private List<FinancialTransaction> filteredTransactions = new();

    protected override async Task OnInitializedAsync()
    {
        database = await TransactionDatabase.LoadDatabaseAsync();
        filteredTransactions = database.Transactions;
    }

    private void OpenAddModal()
    {
        transactionModel = new FinancialTransaction { Date = DateTime.Now };
        modalTitle = "Add Transaction";
        showTransactionModal = true;
    }

    private void OpenEditModal(FinancialTransaction transaction)
    {
        transactionModel = new FinancialTransaction
        {
            Id = transaction.Id,
            Description = transaction.Description,
            Notes = transaction.Notes,
            Date = transaction.Date,
            Amount = transaction.Amount,
            Type = transaction.Type,
            Category = transaction.Category
        };
        modalTitle = "Edit Transaction";
        showTransactionModal = true;
    }

    private void CloseTransactionModal()
    {
        showTransactionModal = false;
    }

    private async Task SaveTransaction()
    {
        if (modalTitle == "Add Transaction")
        {
            transactionModel.Id = Guid.NewGuid();
            database.Transactions.Add(transactionModel);
        }
        else
        {
            var existingTransaction = database.Transactions.FirstOrDefault(t => t.Id == transactionModel.Id);
            if (existingTransaction != null)
            {
                existingTransaction.Description = transactionModel.Description;
                existingTransaction.Notes = transactionModel.Notes;
                existingTransaction.Date = transactionModel.Date;
                existingTransaction.Amount = transactionModel.Amount;
                existingTransaction.Type = transactionModel.Type;
                existingTransaction.Category = transactionModel.Category;
            }
        }

        FilterTransactions();
        await TransactionDatabase.SaveDatabaseAsync(database);
        CloseTransactionModal();
    }

    private async Task DeleteTransaction(FinancialTransaction transaction)
    {
        database.Transactions.Remove(transaction);
        await TransactionDatabase.SaveDatabaseAsync(database);
        FilterTransactions();
    }

    private void FilterTransactions()
    {
        filteredTransactions = database.Transactions
            .Where(t => (string.IsNullOrEmpty(selectedType) || t.Type.Equals(selectedType, StringComparison.OrdinalIgnoreCase)) &&
                        (string.IsNullOrEmpty(selectedCategory) || (t.Category != null && t.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase))) &&
                        (t.Date >= startDate && t.Date <= endDate))
            .ToList();
    }

    private void ClearFilters()
    {
        selectedType = string.Empty;
        selectedCategory = string.Empty;
        startDate = DateTime.MinValue;
        endDate = DateTime.MaxValue;
        FilterTransactions();  // Reset the filter and show all transactions
    }

    private void OpenCategoryModal()
    {
        newCategory = string.Empty;
        showCategoryModal = true;
    }

    private void CloseCategoryModal()
    {
        showCategoryModal = false;
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory) && !database.Categories.Contains(newCategory))
        {
            database.Categories.Add(newCategory);
            await TransactionDatabase.SaveDatabaseAsync(database);
        }

        CloseCategoryModal();
    }
}
