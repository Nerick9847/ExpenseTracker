@page "/transactions"
@using ExpenseTracker.Services;
@using ExpenseTracker.Models;
@inject CategoryDb CategoryDb
@inject DatabaseService TransactionDb

<h3>Transaction Management</h3>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <button class="btn btn-primary" @onclick="OpenAddTransactionModal">Add Transaction</button>
    <button class="btn btn-secondary" @onclick="OpenAddCategoryModal">Add Category</button>
</div>

<!-- Transaction List -->
<h4>Transactions</h4>
@if (transactions.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Category</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Date.ToShortDateString()</td>
                    <td>@transaction.Category</td>
                    <td>@transaction.Description</td>
                    <td>@transaction.Amount:C</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No transactions available.</p>
}

<!-- Categories List -->
<h4>Categories</h4>
@if (categories.Any())
{
    <ul>
        @foreach (var category in categories)
        {
            <li>@category</li>
        }
    </ul>
}
else
{
    <p>No categories available.</p>
}

<!-- Modals -->
<TransactionModal 
    Show="showTransactionModal" 
    OnClose="CloseTransactionModal" 
    Categories="categories" 
    OnTransactionAdded="AddTransactionToList" />

<CategoryModal 
    Show="showCategoryModal" 
    OnClose="CloseCategoryModal" 
    OnCategoryAdded="AddCategoryToList" />

@code {
    // Transactions and Categories
    private List<Transaction> transactions = new();
    private List<string> categories = new();

    // Modal States
    private bool showTransactionModal = false;
    private bool showCategoryModal = false;

    protected override async Task OnInitializedAsync()
    {
        // Load Transactions and Categories from JSON
        transactions = await TransactionDb.GetTransactionsAsync();
        categories = await CategoryDb.GetCategoriesAsync();
    }

    // Open Modals
    private void OpenAddTransactionModal()
    {
        showTransactionModal = true;
    }

    private void OpenAddCategoryModal()
    {
        showCategoryModal = true;
    }

    // Close Modals
    private void CloseTransactionModal()
    {
        showTransactionModal = false;
    }

    private void CloseCategoryModal()
    {
        showCategoryModal = false;
    }

    // Add Category
    private async Task AddCategoryToList(string newCategory)
    {
        if (!string.IsNullOrWhiteSpace(newCategory) && !categories.Contains(newCategory))
        {
            categories.Add(newCategory);
            await CategoryDb.SaveCategoriesAsync(categories);
        }
    }

    // Add Transaction
    private async Task AddTransactionToList(Transaction newTransaction)
    {
        transactions.Add(newTransaction);
        await TransactionDb.SaveTransactionsAsync(transactions);
    }

    // Delete Transaction
    private async Task DeleteTransaction(Transaction transaction)
    {
        transactions.Remove(transaction);
        await TransactionDb.SaveTransactionsAsync(transactions);
    }
}
