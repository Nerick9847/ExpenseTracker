    @page "/transaction"
    @using ExpenseTracker.Services
    @inject BalanceState BalanceState
    @inject TransactionService TransactionService

<style>
    .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 2px solid #d3d3d3;
    padding-bottom: 10px;
    }

    .buttons-container {
    display: flex;
    gap: 15px;
    }

    .filter-container {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    align-items: center;
    margin-bottom: 20px;
    }

    .form-control {
    width: 200px;
    padding: 5px;
    font-size: 14px;
    border-radius: 5px;
    border: 1px solid #bbb;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    background-color: #f9f9f9;
    color: #333;
    }

    .form-control:hover {
    border-color: #999;
    }

    .filter-buttons {
    display: flex;
    gap: 10px;
    }

    .btn {
    padding: 8px 15px;
    font-size: 14px;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    transition: all 0.3s ease;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
    }

    .btn:hover {
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
    }

    .btn-primary {
    background-color: #007bff;
    color: white;
    }

    .btn-secondary {
    background-color: #6c757d;
    color: white;
    }

    .btn-info {
    background-color: #17a2b8;
    color: white;
    }

    .btn-warning {
    background-color: #ffc107;
    color: black;
    }

    .btn-danger {
    background-color: #dc3545;
    color: white;
    }

    .transaction-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #fff;
    color: #333;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }

    .transaction-table th, .transaction-table td {
    border: 1px solid #d3d3d3;
    padding: 10px;
    text-align: left;
    }

    .transaction-table th {
    background-color: #f5f5f5;
    color: #333;
    }

    .transaction-table tbody tr:hover {
    background-color: #f0f0f0;
    }

    .modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .modal-content {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    max-width: 500px;
    width: 100%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    }

    .date-range {
    display: flex;
    gap: 10px;
    align-items: center;
    }
</style>

<div class="dashboard-header">
    <div class="buttons-container">
        <button class="btn btn-primary" @onclick="OpenAddModal">Add Transaction</button>
        <button class="btn btn-secondary" @onclick="OpenCategoryModal">Add Category</button>
        <button class="btn btn-info" @onclick="ExportTransactions">Export</button>
    </div>
</div>

<div class="filter-container">
    <input type="text" class="form-control" @bind="descriptionFilter" placeholder="Search by Description" />
    <select class="form-control" @bind="selectedType">
        <option value="">Select Type</option>
        <option value="Income">Income</option>
        <option value="Expense">Expense</option>
    </select>
    <select class="form-control" @bind="selectedCategory">
        <option value="">Select Category</option>
        @foreach (var category in database.Categories)
        {
            <option value="@category">@category</option>
        }
    </select>
    <div class="date-range">
        <label>Start Date:</label>
        <input type="date" class="form-control" @bind="startDate" />
        <label>End Date:</label>
        <input type="date" class="form-control" @bind="endDate" />
    </div>
    <div class="filter-buttons">
        <button class="btn btn-primary" @onclick="FilterTransactions">Filter</button>
        <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-info" @onclick="ToggleSort">Sort by Amount @(isSortedAscending ? "Ascending" : "Descending")</button>
    </div>
</div>

<table class="transaction-table">
    <thead>
        <tr>
            <th>Description</th>
            <th>Date</th>
            <th>Amount</th>
            <th>Type</th>
            <th>Category</th>
            <th>Notes</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Description</td>
                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                <td>@transaction.Amount.ToString("C")</td>
                <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</td>
                <td>@(string.IsNullOrEmpty(transaction.Category) ? "Uncategorized" : transaction.Category)</td>
                <td>@transaction.Notes</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => OpenEditModal(transaction)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@if (showTransactionModal)
{
    <div class="modal">
        <div class="modal-content">
            <h2>@modalTitle</h2>
            <div>
                <label>Description:</label>
                <input type="text" class="form-control" @bind="transactionModel.Description" />
            </div>
            <div>
                <label>Date:</label>
                <input type="date" class="form-control" @bind="transactionModel.Date" />
            </div>
            <div>
                <label>Amount:</label>
                <input type="number" class="form-control" @bind="transactionModel.Amount" />
            </div>
            <div>
                <label>Type:</label>
                <select class="form-control" @bind="transactionModel.Type">
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                    <option value="Debt">Debt</option>
                </select>
            </div>
            <div>
                <label>Category:</label>
                <select class="form-control" @bind="transactionModel.Category">
                    <option value="">Select Category</option>
                    @foreach (var category in database.Categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
            <div>
                <label>Notes:</label>
                <input type="text" class="form-control" @bind="transactionModel.Notes" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseTransactionModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveTransaction">Save</button>
            </div>
        </div>
    </div>
}

@if (showCategoryModal)
{
    <div class="modal">
        <div class="modal-content">
            <h2>Add Category</h2>
            <div>
                <label>Category Name:</label>
                <input type="text" class="form-control" @bind="newCategory" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseCategoryModal">Cancel</button>
                <button class="btn btn-primary" @onclick="AddCategory">Add</button>
            </div>
        </div>
    </div>
}

@code {
        private DatabaseModel database = new();
        private FinancialTransaction transactionModel = new();
        private bool showBalanceError = false;
        private string balanceErrorMessage = string.Empty;
        private string newCategory = string.Empty;
        private bool showTransactionModal = false;
        private bool showCategoryModal = false;
        private string modalTitle = "Add Transaction";
        private string selectedType = string.Empty;
        private string selectedCategory = string.Empty;
        private string descriptionFilter = string.Empty;
        private DateTime? startDate = null;
        private DateTime? endDate = null;
        private List<FinancialTransaction> filteredTransactions = new();
        private bool isSortedAscending = true;

        protected override async Task OnInitializedAsync()
        {
            database = await TransactionDatabase.LoadDatabaseAsync();
            filteredTransactions = database.Transactions;
            BalanceState.OnBalanceChange += StateHasChanged;
        }

        private void OpenAddModal()
        {
            transactionModel = new FinancialTransaction { Date = DateTime.Now };
            modalTitle = "Add Transaction";
            showTransactionModal = true;
        }

        private void OpenEditModal(FinancialTransaction transaction)
        {
            transactionModel = new FinancialTransaction
                {
                    Id = transaction.Id,
                    Description = transaction.Description,
                    Notes = transaction.Notes,
                    Date = transaction.Date,
                    Amount = transaction.Amount,
                    Type = transaction.Type,
                    Category = transaction.Category
                };
            modalTitle = "Edit Transaction";
            showTransactionModal = true;
        }

        private void CloseTransactionModal()
        {
            showTransactionModal = false;
            showBalanceError = false;
        }

        private async Task SaveTransaction()
        {
            // Check for expense exceeding the balance
            if (transactionModel.Type == "Expense" && transactionModel.Amount > BalanceState.CurrentBalance)
            {
                showBalanceError = true; // Enable the error flag
                balanceErrorMessage = "Expense amount exceeds the available balance.";
                StateHasChanged(); // Ensure the UI updates
                return; // Stop further execution
            }

            if (modalTitle == "Add Transaction")
            {
                transactionModel.Id = Guid.NewGuid();
                database.Transactions.Add(transactionModel);
            }
            else
            {
                var existingTransaction = database.Transactions.FirstOrDefault(t => t.Id == transactionModel.Id);
                if (existingTransaction != null)
                {
                    existingTransaction.Description = transactionModel.Description;
                    existingTransaction.Notes = transactionModel.Notes;
                    existingTransaction.Date = transactionModel.Date;
                    existingTransaction.Amount = transactionModel.Amount;
                    existingTransaction.Type = transactionModel.Type;
                    existingTransaction.Category = transactionModel.Category;
                }
            }

            await TransactionDatabase.SaveDatabaseAsync(database);
            FilterTransactions();
            CloseTransactionModal();
        }

        private void FilterTransactions()
        {
            filteredTransactions = database.Transactions
                .Where(t => (string.IsNullOrEmpty(descriptionFilter) || t.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase))
                    && (string.IsNullOrEmpty(selectedType) || t.Type == selectedType)
                    && (string.IsNullOrEmpty(selectedCategory) || t.Category == selectedCategory)
                    && (!startDate.HasValue || (!endDate.HasValue && t.Date.Date == startDate.Value.Date) || (endDate.HasValue && t.Date.Date >= startDate.Value.Date && t.Date.Date <= endDate.Value.Date)))
                .OrderBy(t => isSortedAscending ? t.Amount : -t.Amount)
                .ToList();
        }

        private void ClearFilters()
        {
            descriptionFilter = string.Empty;
            selectedType = string.Empty;
            selectedCategory = string.Empty;
            startDate = null;
            endDate = null;
            isSortedAscending = true;
            FilterTransactions();
        }

        private void ToggleSort()
        {
            isSortedAscending = !isSortedAscending;
            FilterTransactions();
        }

        private void OpenCategoryModal()
        {
            showCategoryModal = true;
        }

        private void CloseCategoryModal()
        {
            showCategoryModal = false;
        }

        private async Task AddCategory()
        {
            if (!string.IsNullOrEmpty(newCategory) && !database.Categories.Contains(newCategory))
            {
                database.Categories.Add(newCategory);
                await TransactionDatabase.SaveDatabaseAsync(database);
            }
            newCategory = string.Empty;
            CloseCategoryModal();
        }

        private void DeleteTransaction(FinancialTransaction transaction)
        {
            database.Transactions.Remove(transaction);
            TransactionDatabase.SaveDatabaseAsync(database);
            FilterTransactions();
        }

        private void ExportTransactions()
        {
            var transactionsToExport = filteredTransactions.Select(t => new
            {
                t.Description,
                t.Notes,
                Date = t.Date.ToString("yyyy-MM-dd"),
                Amount = t.Amount.ToString("C"),
                t.Type,
                t.Category
            }).ToList();
        }
    }
